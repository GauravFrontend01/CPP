PERMUTATIONS DIAGRAM: All Permutations of {1, 2, 3}
====================================================

KEY CONCEPT: Permutations are different from subsets!
- Subsets: Choose which elements to include (2^n possibilities)
- Permutations: Rearrange ALL elements (n! possibilities)

For {1, 2, 3}: 3! = 6 permutations

START: arr = [1, 2, 3], index = 0
┌─────────────────────────────────────────────────────────────┐
│                    [1, 2, 3]                               │
│                    index = 0                               │
│              Need to place element at position 0           │
└─────────────────────────────────────────────────────────────┘
                                │
                ┌───────────────┼───────────────┐
                │               │               │
            SWAP(0,0)       SWAP(0,1)       SWAP(0,2)        │
            [1,2,3]         [2,1,3]         [3,2,1]          │
                │               │               │
                ▼               ▼               ▼
        ┌─────────────┐   ┌─────────────┐   ┌─────────────┐   │
        │ [1,2,3]     │   │ [2,1,3]     │   │ [3,2,1]     │   │
        │ index = 1   │   │ index = 1   │   │ index = 1   │   │
        │ pos 1: 2,3  │   │ pos 1: 1,3  │   │ pos 1: 2,1  │   │
        └─────────────┘   └─────────────┘   └─────────────┘   │
                │               │               │
        ┌───────┼───────┐ ┌─────┼─────┐ ┌─────┼─────┐       │
        │       │       │ │     │     │ │     │     │       │
    SWAP(1,1) SWAP(1,2) │ │ SWAP(1,1) SWAP(1,2) │ │ SWAP(1,1) SWAP(1,2) │       │
    [1,2,3]   [1,3,2]   │ │ [2,1,3]   [2,3,1]   │ │ [3,2,1]   [3,1,2]   │       │
        │       │       │ │     │     │ │     │     │       │
        ▼       ▼       │ ▼     ▼     ▼ │ ▼     ▼     ▼       │
┌─────────┐ ┌─────────┐ │ ┌─────────┐ ┌─────────┐ │ ┌─────────┐ ┌─────────┐ │
│[1,2,3]  │ │[1,3,2]  │ │ │[2,1,3]  │ │[2,3,1]  │ │ │[3,2,1]  │ │[3,1,2]  │ │
│index=2  │ │index=2  │ │ │index=2  │ │index=2  │ │ │index=2  │ │index=2  │ │
│pos 2: 3 │ │pos 2: 2 │ │ │pos 2: 3 │ │pos 2: 1 │ │ │pos 2: 1 │ │pos 2: 2 │ │
└─────────┘ └─────────┘ │ └─────────┘ └─────────┘ │ └─────────┘ └─────────┘ │
        │       │       │     │         │         │     │         │         │
    ┌───┼───┐ ┌─┼─┐     │ ┌───┼───┐ ┌───┼───┐     │ ┌───┼───┐ ┌───┼───┐     │
    │   │   │ │ │ │     │ │   │   │ │   │   │     │ │   │   │ │   │   │     │
SWAP(2,2) SWAP(2,2) │ │ SWAP(2,2) SWAP(2,2) │ │ SWAP(2,2) SWAP(2,2) │     │
    │   │   │ │ │ │     │ │   │   │ │   │   │     │ │   │   │ │   │   │     │
    ▼   ▼   ▼ ▼ ▼ ▼     │ ▼   ▼   ▼ ▼   ▼   ▼     │ ▼   ▼   ▼ ▼   ▼   ▼     │
┌─────┐ ┌───┐ ┌─┐ ┌─┐   │ ┌───┐ ┌─┐ ┌───┐ ┌─┐   │ ┌───┐ ┌─┐ ┌───┐ ┌─┐   │
│[1,2,3]│ │[1,3,2]│ │[2,1,3]│ │[2,3,1]│ │[3,2,1]│ │[3,1,2]│   │
│PRINT │ │PRINT │ │PRINT │ │PRINT │ │PRINT │ │PRINT │   │
│"1 2 3"│ │"1 3 2"│ │"2 1 3"│ │"2 3 1"│ │"3 2 1"│ │"3 1 2"│   │
└─────┘ └───┘ └─┘ └─┘   │ └───┘ └─┘ └───┘ └─┘   │ └───┘ └─┘ └───┘ └─┘   │
                        │                       │
                        └───────────────────────┘

STEP-BY-STEP EXECUTION:
======================

1. **Start:** arr = [1,2,3], index = 0
   - Try placing 1 at position 0: SWAP(0,0) → [1,2,3]
   - Try placing 2 at position 0: SWAP(0,1) → [2,1,3]  
   - Try placing 3 at position 0: SWAP(0,2) → [3,2,1]

2. **For [1,2,3], index = 1:**
   - Try placing 2 at position 1: SWAP(1,1) → [1,2,3]
   - Try placing 3 at position 1: SWAP(1,2) → [1,3,2]

3. **For [2,1,3], index = 1:**
   - Try placing 1 at position 1: SWAP(1,1) → [2,1,3]
   - Try placing 3 at position 1: SWAP(1,2) → [2,3,1]

4. **For [3,2,1], index = 1:**
   - Try placing 2 at position 1: SWAP(1,1) → [3,2,1]
   - Try placing 1 at position 1: SWAP(1,2) → [3,1,2]

5. **When index = 2:** Print all permutations

BACKTRACKING MECHANISM:
======================

The key is the swap-back operation:
```cpp
swap(arr[index], arr[i]);        // Make a choice
printPermutations(arr, index + 1); // Explore that choice
swap(arr[index], arr[i]);        // ← BACKTRACK: Undo the choice
```

VISUAL SWAP OPERATIONS:
======================

Original: [1, 2, 3]

Level 0 (index = 0):
- SWAP(0,0): [1,2,3] → [1,2,3] (no change)
- SWAP(0,1): [1,2,3] → [2,1,3] 
- SWAP(0,2): [1,2,3] → [3,2,1]

Level 1 (index = 1):
From [1,2,3]:
- SWAP(1,1): [1,2,3] → [1,2,3] (no change)
- SWAP(1,2): [1,2,3] → [1,3,2]

From [2,1,3]:
- SWAP(1,1): [2,1,3] → [2,1,3] (no change)
- SWAP(1,2): [2,1,3] → [2,3,1]

From [3,2,1]:
- SWAP(1,1): [3,2,1] → [3,2,1] (no change)
- SWAP(1,2): [3,2,1] → [3,1,2]

RECURSION TREE:
==============

                    [1,2,3]
                   /   |   \
                  /    |    \
                 /     |     \
            [1,2,3] [2,1,3] [3,2,1]
            /     \   /     \   /     \
           /       \ /       \ /       \
      [1,2,3] [1,3,2] [2,1,3] [2,3,1] [3,2,1] [3,1,2]

FINAL OUTPUT:
============

1. "1 2 3"  (from [1,2,3])
2. "1 3 2"  (from [1,3,2])
3. "2 1 3"  (from [2,1,3])
4. "2 3 1"  (from [2,3,1])
5. "3 2 1"  (from [3,2,1])
6. "3 1 2"  (from [3,1,2])

KEY INSIGHTS:
============

1. **Each position gets filled exactly once**
2. **We try every remaining element at each position**
3. **Backtracking restores the array to its previous state**
4. **Total permutations = n! (factorial of array size)**
5. **Unlike subsets, we use ALL elements in each permutation** 